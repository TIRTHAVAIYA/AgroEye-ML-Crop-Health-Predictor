# -*- coding: utf-8 -*-
"""AgroEye.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eWh_akDt3HLkM1Zbhq_Yuv6nShhwuEOC
"""

!pip install gradio scikit-learn pandas matplotlib seaborn --quiet

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import gradio as gr
import seaborn as sns
import matplotlib.pyplot as plt

#  Load and clean dataset

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Advanced Soybean Agricultural Dataset.csv")

df.columns = df.columns.str.strip().str.replace('\n', '').str.replace('\r', '')

#  Create binary label for health status
median_yield = df['Seed Yield per Unit Area (SYUA)'].median()
df['health_status'] = df['Seed Yield per Unit Area (SYUA)'].apply(lambda x: 1 if x >= median_yield else 0)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

features = [
    'Plant Height (PH)',
    'Number of Pods (NP)',
    'Biological Weight (BW)',
    'Sugars (Su)',
    'Relative Water Content in Leaves (RWCL)',
    'ChlorophyllA663',
    'Chlorophyllb649',
    'Protein Percentage (PPE)',
    'Weight of 300 Seeds (W3S)',
    'Leaf Area Index (LAI)',
    'Number of Seeds per Pod (NSP)',
    'Protein Content (PCO)'
]


X = df[features]

y = df['health_status']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

#  Train ML model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate model
y_pred = model.predict(X_test)
print("\n📊 Classification Report:\n", classification_report(y_test, y_pred))
print("✅ Accuracy:", accuracy_score(y_test, y_pred))

#  Plot confusion matrix
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

#  Gradio Prediction Function
def predict_health(*inputs):
    input_data = np.array(inputs).reshape(1, -1)
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)[0]
    return "🌱 Healthy Crop 🌾" if prediction == 1 else "🥀 Unhealthy Crop ⚠️"

inputs = [gr.Number(label=feature) for feature in features]

gr.Interface(
    fn=predict_health,
    inputs=inputs,
    outputs=gr.Text(label="Crop Health Status"),
    title="🌿 AgroEye - Soybean Crop Health Predictor",
    description="Enter physiological and biochemical features to predict whether your soybean crop is healthy.",
    theme="soft"
).launch()